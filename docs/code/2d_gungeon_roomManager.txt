public class GungeonRoomManager : MonoBehaviour
{
    /* ... */

    /// <summary>
    /// Enemies that can spawn inside the room.
    /// </summary>
    [FormerlySerializedAs("Enemies")]
    public GameObject[] EnemyPrefabs;
    
    /// <summary>
    /// Enemies that are still alive in the room. (Do not change manually)
    /// </summary>
    public List<GungeonEnemy> RemainingEnemies;

    /// <summary>
    /// Whether enemies were spawned.
    /// </summary>
    public bool EnemiesSpawned;

    /// <summary>
    /// Collider of the floor tilemap layer.
    /// </summary>
    public Collider2D FloorCollider;
    
    /// <summary>
    /// Use the shared Random instance so that the results are properly seeded.
    /// </summary>
    private static System.Random Random => GungeonGameManager.Instance.Random;

    /* ... */

    private void SpawnEnemies()
    {
        EnemiesSpawned = true;
        
        var enemies = new List<GungeonEnemy>();
        var totalEnemiesCount = Random.Next(4, 8);

        while (enemies.Count < totalEnemiesCount)
        {
            // Find random position inside floor collider bounds
            var position = RandomPointInBounds(FloorCollider.bounds, 1f);

            // Check if the point is actually inside the collider as there may be holes in the floor, etc.
            if (!IsPointWithinCollider(FloorCollider, position))
            {
                continue;
            }

            // We want to make sure that there is no other collider in the radius of 1
            if (Physics2D.OverlapCircleAll(position, 0.5f).Any(x => !x.isTrigger))
            {
                continue;
            }

            // Pick random enemy prefab
            var enemyPrefab = EnemyPrefabs[Random.Next(0, EnemyPrefabs.Length)];

            // Create an instance of the enemy and set position and parent
            var enemy = Instantiate(enemyPrefab, roomInstance.RoomTemplateInstance.transform, true);
            enemy.transform.position = position;
            
            // Add the GungeonEnemy component to know when the enemy is killed
            var gungeonEnemy = enemy.AddComponent<GungeonEnemy>();
            gungeonEnemy.RoomManager = this;
            
            enemies.Add(gungeonEnemy);
        }

        // Store the list of all spawned enemies for tracking purposes
        RemainingEnemies = enemies;
    }

    private static bool IsPointWithinCollider(Collider2D collider, Vector2 point)
    {
        return collider.OverlapPoint(point);
    }

    private static Vector3 RandomPointInBounds(Bounds bounds, float margin = 0)
    {
        return new Vector3(
            RandomRange(bounds.min.x + margin, bounds.max.x - margin),
            RandomRange(bounds.min.y + margin, bounds.max.y - margin),
            RandomRange(bounds.min.z + margin, bounds.max.z - margin)
        );
    }

    private static float RandomRange(float min, float max)
    {
        return (float)(Random.NextDouble() * (max - min) + min);
    }

    /* ... */
}