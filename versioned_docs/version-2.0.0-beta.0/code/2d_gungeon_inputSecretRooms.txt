[CreateAssetMenu(menuName = "Edgar/Examples/Enter The Gungeon/Input setup", fileName = "Gungeon Input Setup")]
public class GungeonInputSetupTask : DungeonGeneratorInputBaseGrid2D
{
    public LevelGraph LevelGraph;

    /* ... */

    public GungeonRoomTemplatesConfig RoomTemplates;

    // The probability that a secret room is added to the level
    [Range(0f, 1f)]
    public float SecretRoomChance = 0.9f;

    // The probability that a secret room is attached to a dead-end room
    [Range(0f, 1f)]
    public float SecretRoomDeadEndChance = 0.5f;

    protected override LevelDescriptionGrid2D GetLevelDescription()
    {
        /* ... */

        // Add secret rooms
        AddSecretRoom(levelDescription);

        /* ... */
    }

    private void AddSecretRoom(LevelDescriptionGrid2D levelDescription)
    {
        // Return early if no secret room should be added to the level
        if (Payload.Random.NextDouble() > SecretRoomChance) return;

        // Get the graphs of rooms
        var graph = levelDescription.GetGraph();

        // Decide whether to attach the secret room to a dead end room or not
        var attachToDeadEnd = Payload.Random.NextDouble() < SecretRoomDeadEndChance;

        // Find all the possible rooms to attach to and choose a random one
        var possibleRoomsToAttachTo = graph.Vertices.Cast<GungeonRoom>().Where(x =>
            (!attachToDeadEnd || graph.GetNeighbors(x).Count() == 1) && x.Type != GungeonRoomType.Entrance
        ).ToList();
        var roomToAttachTo = possibleRoomsToAttachTo[Payload.Random.Next(possibleRoomsToAttachTo.Count)];

        // Create secret room
        var secretRoom = ScriptableObject.CreateInstance<GungeonRoom>();
        secretRoom.Type = GungeonRoomType.Secret;
        levelDescription.AddRoom(secretRoom, RoomTemplates.GetRoomTemplates(secretRoom).ToList());

        // Prepare the connection between secretRoom and roomToAttachTo
        var connection = ScriptableObject.CreateInstance<GungeonConnection>();
        connection.From = roomToAttachTo;
        connection.To = secretRoom;

        // Connect the two rooms with a corridor
        var corridorRoom = ScriptableObject.CreateInstance<GungeonRoom>();
        corridorRoom.Type = GungeonRoomType.Corridor;
        levelDescription.AddCorridorConnection(connection, corridorRoom, RoomTemplates.CorridorRoomTemplates.ToList());
    }
}