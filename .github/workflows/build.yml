name: Build (multiple jobs)

on:
  push:

jobs:
  params:
    name: Params
    runs-on: ubuntu-latest
    outputs:
      jobs: ${{ steps.params.outputs.jobs }}
    steps:
      - name: Parameters
        id: params
        shell: python
        run: |
          unityVersions = ['2018.4.18f1', '2019.4.36f1', '2020.3.30f1', '2021.2.15f1']
          renderPipelines = ['builtin', 'URP']
          jobs = [
            {
              'unityVersion': unityVersion,
              'renderPipeline': renderPipeline,
            }
            for unityVersion in unityVersions
            for renderPipeline in renderPipelines
            if renderPipeline == 'builtin' or not unityVersion.startswith('2018')
          ]

          print(f'::set-output name=jobs::{jobs!s}')
          print("Jobs:")
          print(jobs)

  build:
    name: Test & build
    needs: [params]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.params.outputs.jobs) }}
    steps:
      # Checkout Unity project structure
      - name: Checkout Unity project structure
        uses: actions/checkout@v2
        with:
          repository: OndrejNepozitek/ProceduralLevelGenerator-UnityProjectStructure

      # Checkout this repository
      - name: Checkout this repository
        uses: actions/checkout@v2
        with:
          path: Assets/Edgar
    
      # Test
      - name: Run tests
        if: startsWith(github.ref, 'refs/tags/v')
        uses: game-ci/unity-test-runner@v2
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE_NEW }}
        with:
          unityVersion: ${{ matrix.unityVersion }}

      # Build
      - name: Run build
        if: startsWith(github.ref, 'refs/tags/v')
        uses: game-ci/unity-builder@v2
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE_NEW }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          unityVersion: ${{ matrix.unityVersion }}
          targetPlatform: StandaloneWindows
          versioning: None

  package:
    name: Package
    runs-on: ubuntu-latest
    steps:
      # Checkout Unity project structure
      - name: Checkout Unity project structure
        uses: actions/checkout@v2
        with:
          repository: OndrejNepozitek/ProceduralLevelGenerator-UnityProjectStructure

      # Checkout this repository
      - name: Checkout this repository
        uses: actions/checkout@v2
        with:
          path: Assets/Edgar

      # Prepare unitypackage file list
      - name: Prepare unitypackage file list
        run: |
          echo "Assets/Edgar.meta" > unitypackageFiles
          find ./Assets/Edgar/ -name \*.meta ! -path "./Assets/Edgar/Tests*" ! -path "./Assets/Edgar/Examples/Grid2D/Resources/Docs*" ! -path "./Assets/Edgar/*.md.meta" ! -path "./Assets/Edgar/Edgar-Unity.sln.DotSettings.meta" >> unitypackageFiles

      # Package files
      - name: Package files
        uses: pCYSl5EDgo/create-unitypackage@master
        with:
          package-path: 'Edgar.unitypackage'
          include-files: unitypackageFiles
      
      # Upload unitypackage
      - name: Upload unitypackage
        uses: actions/upload-artifact@v2-preview
        with:
          path: Edgar.unitypackage
          name: Edgar.unitypackage

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [package]
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      # Download package
      - name: Download package
        uses: actions/download-artifact@v3
        with:
          name: Edgar.unitypackage

      # Prepare release package name
      - name: Prepare release package name
        run: |
          ref="${GITHUB_REF}"
          ref="${ref/refs\/tags\/v/}"
          ref="${ref//./_}"
          ref="${ref//-/_}"
          package_name="Edgar_$ref.unitypackage"
          echo "::set-output name=PACKAGE_NAME::${package_name}"
          cp Edgar.unitypackage $package_name
        env:
          GITHUB_REF: ${{ github.ref }}
        id: get_package_name

      # Upload unitypackage
      - name: Upload unitypackage
        uses: actions/upload-artifact@v2-preview
        with:
          path: ${{ steps.get_package_name.outputs.PACKAGE_NAME }}
          name: ${{ steps.get_package_name.outputs.PACKAGE_NAME }}

      # Release
      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ steps.get_package_name.outputs.PACKAGE_NAME }}
          draft: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  api-docs:
    name: Rebuild API docs
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/pro-master'
    steps:
      # Trigger api docs build
      - name: Trigger api docs build
        run: |
          curl -XPOST -u "${{secrets.GH_PAT_USERNAME}}:${{secrets.GH_PAT}}" -H "Accept: application/vnd.github.everest-preview+json"  -H "Content-Type: application/json" https://api.github.com/repos/OndrejNepozitek/ProceduralLevelGenerator-UnityApiDocs/dispatches --data '{"event_type": "build_application"}'
